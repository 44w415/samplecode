import java.util.*;

/**This class implements the WISH interface
 *
 * @author (Yuan-Hsiu Lee) 
 * @version (29/4/2022)
 **/
public class Resort implements WISH
{
    private ArrayList <Permit> allPermits = new ArrayList<Permit>();
    private ArrayList <Planet> allPlanets = new ArrayList<Planet>();
    private ArrayList <Shuttle> allShuttles = new ArrayList<Shuttle>();
    private String name;


    /** constructor
     */
    public Resort(String loc) 
    {
        name = loc;
        loadPlanets();
        loadPermits();
        setUpShuttles();
           
    }
    
    /**
     * Returns all of the details of all planets including the permits
     * currently on each planet, on "No permits"
     * @return all of the details of all planets including location 
     * and all permits currently on each planet, or "No permits" 
     */
    public String toString()
    {
        String ss = name;
        ss = ss +listPlanetDetails();
        return ss;
    }
    
    /**Returns a String with details of a permit
     * @param permitId - id number of the permit
     * @return the details of the permit as a String, or "No such permit"
     */
    public String getPermitDetails(int permitId)
    {
        for(Permit temp: allPermits)
        {
            if(temp.getID() == permitId)
            {
                return temp.toString();
            }
        }
        return "No such permit";
    }

    
    /** Given the name of a planet, returns the planet id number
     * or -1 if planet does not exist
     * @param name of planet
     * @return id number of planet
     */
    public int getPlanetNumber(String ww)
    {
        for(Planet temp: allPlanets)
        {
            if (temp.getName().equals(ww))
            {
                return temp.getRefNo();
            }
        }
        
        return -1;
    }
    
    /**Returns a String representation of all the permits on all planets
     * @return a String representation of all permits on all planets
     **/
    public String getAllPermitsOnEachPlanet()
    {
        String ss = "";
        for(Planet temp: allPlanets)
        {
            if(temp.allPermits().equals("\nNo Permits")) continue; 
                ss = ss + "\n" + temp.allPermits();
        }
                return ss;
    }
           
    

    
     /**Returns the planet details as a string
     **/
     
     public String listPlanetDetails()
    {
        String ss = "";
        for(Planet temp: allPlanets)
        {
            ss = ss + temp.toString();
        }
            return ss;
    } 
    
    /**Returns the name of the planet which contains the specified permit or null
     * @param tr - the specified permit
     * @return the name of the Planet which contains the permit, or null
     **/
    public String getPermitLocation(int tr)
    {
        Permit temp = findPermit(tr);
        if (temp != null)
        {
            for (Planet dtemp : allPlanets)
            {
                if(dtemp.isInPlanet(tr))
                {
                    return dtemp.getName();
                }
            }
        }
        return null; 
    }
    
               
    /**Returns a String representation of all the permits on specified planet
     * @return a String representation of all permits on specified planet
     **/
    public String getAllPermitsOnOnePlanet(String planet)
    {
        for(Planet temp: allPlanets)
        {
            if(temp.getName().equals(planet))
            {
                return temp.allPermits();
            }
        }
        
        return "No such planet exists";
    } 

    
     /**Returns true if a Permit is allowed to move using the shuttle, false otherwise
      * A move can be made if:  
      * the rating of the permit  >= the rating of the destination planet
      * AND the destination planet is not full
      * AND the permit has sufficient credits
      * AND the permit is currently on the source planet
      * AND the permit id is for a permit on the system
      * AND the shuttle code is the code for a shuttle on the system
      * @param pId is the id of the permit requesting the move
      * @param shtlCode is the code of the shuttle journey by which the permit wants to pPermitel
      * @return true if the permit is allowed on the shuttle journey, false otherwise 
      **/
    public boolean canTravel(int pId, String shtlCode)
    {   //other checks optional
        Shuttle sh = findShuttle(shtlCode);
        Permit perm = findPermit(pId);
        
        if(sh == null || perm == null)
        {
            return false;
        }
        else
        {
            return sh.canTravel(perm);
        }

    }     

    /**Returns the result of a permit requesting to move by Shuttle.
     * A move will be successful if:  
     * the luxury rating of the permit  >= the luxury rating of the destination planet
     * AND the destination planet is not full
     * AND the permit has sufficient credits
     * AND the permit is currently on the source planet
     * AND the permit id is for a permit on the system
     * AND the shuttle code is the code for a shuttle on the system
     * If the shuttle journey can be made, the permit information is removed from the source
     * planet, added to the destination planet and a suitable message returned.
     * If shuttle journey cannot be made, the state of the system remains unchanged
     * and a message specifying the reason is returned.
     * @param ppId is the id of the permit requesting the move
     * @param shtlCode is the code of the shuttle journey by which the permit wants to pPermitel
     * @return a String giving the result of the request 
     **/
    public String travel(int ppId, String shtlCode )
    {   //other checks optional
        Shuttle sh = findShuttle(shtlCode);
        Permit perm = findPermit(ppId);
        
        if (sh ==null)
        {
            return "\nShuttle code does not exist";
        }
        else if (perm == null)
        {
            return "\n Permit does not exist";
        }
        else
        {
            return sh.travel(perm);
        }
    } 
         
    // These methods are for Task 6 only and not required for the Demonstration 
    // If you choose to implement them, uncomment the following code
  

    /** Allows a permit to top up their credits.This method is not concerned with 
     *  the cost of a credit as currency and prices may vary between resorts.
     *  @param id the id of the permit toping up their credits
     *  @param creds the number of credits purchased to be added to permits information
     */
    public void topUpCredits(int id, int creds)
    {
        Permit perm = findPermit(id);
        
        if( perm == null)
        {
            System.out.println("Invalid ID");
        }
        else
        {
            perm.addCredit(creds);
        }
        
    }
   
    //***************private methods**************
    /** Initial loading of planets given in brief
     */
    
    private void loadPlanets()
    {
        Planet p1 = new Planet(0, "Home",0,1000); 
        allPlanets.add(p1);
        
        Planet p2 = new Planet(1, "Sprite",1,100); 
        allPlanets.add(p2);
        
        Planet p3 = new Planet(2, "Tropicana",3,10); 
        allPlanets.add(p3);
        
        Planet p4 = new Planet(3, "Fantasia",5,2); 
        allPlanets.add(p4);
        
        Planet p5 = new Planet(4, "Solo",1,1); 
        allPlanets.add(p5);
       
        
    }
    
    /** Initial loading of shuttle journeys given in brief
     */
    private void setUpShuttles()
    {
        Planet pl1 = findPlanet("Home");
        Planet pl2 = findPlanet("Sprite");
        Planet pl3 = findPlanet("Tropicana");
        Planet pl4 = findPlanet("Fantasia");
        Planet pl5 = findPlanet("Solo");
        
        Shuttle shtl = new Shuttle("ABC1",pl1,pl2);
        allShuttles.add(shtl);
        allShuttles.add(new Shuttle("BCD2", pl2,pl1));
        allShuttles.add(new Shuttle("CDE3", pl2,pl3));
        allShuttles.add(new Shuttle("DEF4", pl3,pl2));
        allShuttles.add(new Shuttle("JKL8", pl3,pl4));
        allShuttles.add(new Shuttle("EFG5", pl4,pl2));
        allShuttles.add(new Shuttle("GHJ6", pl2,pl5));
        allShuttles.add(new Shuttle("HJK7", pl5,pl2));
        
        
    }
    
    
    /** Initial loading of permits given in brief
     */
    private void loadPermits()
    {
        
        
        Permit perm1 = new  Permit(1000,"Lynn",5,10);
        Permit perm2 = new  Permit(1001,"May",3,20);
        Permit perm3 = new  Permit(1002,"Nils",10,20);
        Permit perm4 = new  Permit(1003,"Olek",2,12);
        Permit perm5 = new  Permit(1004,"Pan",3,3);
        Permit perm6 = new  Permit(1005,"Quin",1,5);
        Permit perm7 = new  Permit(1006,"Raj",10,6);
        Permit perm8 = new  Permit(1007,"Sol",7,20);
        Permit perm9 = new  Permit(1008,"Tel",6,24);
        
        allPermits.add(perm1);
        allPermits.add(perm2);
        allPermits.add(perm3);
        allPermits.add(perm4);
        allPermits.add(perm5);
        allPermits.add(perm6);
        allPermits.add(perm7);
        allPermits.add(perm8);
        allPermits.add(perm9);
        
        addPermitToPlanet(1000,"Home");
        addPermitToPlanet(1001,"Home");
        addPermitToPlanet(1002,"Home");
        addPermitToPlanet(1003,"Home");
        addPermitToPlanet(1004,"Home");
        addPermitToPlanet(1005,"Home");
        addPermitToPlanet(1006,"Home");
        addPermitToPlanet(1007,"Home");
        addPermitToPlanet(1008,"Home");

    }
 
    // extra methods 
    
    /** Initial loading of shuttle journeys given in brief
     */
    public String addPermitToPlanet(int pNo, String planet)
    {
        Permit perm = findPermit(pNo);
        Planet pl = findPlanet(planet);
        
        if(perm == null || pl == null)
        {
            return "Permit or planet does not exist";
        }
        else
        {
            if(pl.reachedCapacity())
            {
                return "The planet is full";
            }
            else
            {
                pl.enter(perm);
                return "Permit" + pNo + "added to Planet" + planet; 
            }
        }
}
    
    
private Permit findPermit(int pNo)
    {
        for(int i = 0; i < allPermits.size(); i++)
        {
            Permit temp = allPermits.get(i);  
            if(temp.getID() == pNo)      
            {
                return temp;
            }
        }
        return null;
    }
    
    private Shuttle findShuttle(String shtlID)
    {
        for(Shuttle temp : allShuttles)
        {
            System.out.println(temp.toString());
            String code = temp.getJourneyCode();
            if(code.equals(shtlID))
            {
                System.out.println("Found");
                return temp;
            }
            else
            {
               System.out.println("Not found"); 
            }
        }
        return null;
    }
    
    private Planet findPlanet(String planet)
    {
        for(Planet temp : allPlanets)
        {
            if(temp.getName().equals(planet))
            {
                return temp;
            }
        }
        return null;
    }
    
}
